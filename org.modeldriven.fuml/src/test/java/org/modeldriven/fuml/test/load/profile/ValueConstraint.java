/* * Initial version copyright 2008 Lockheed Martin Corporation, except * as stated in the file entitled Licensing-Information. * * Modifications: * Copyright 2009 Data Access Technologies, Inc. * Copyright 2013 Ivar Jacobson International SA * * Licensed under the Academic Free License version 3.0 * (http://www.opensource.org/licenses/afl-3.0.php), except as stated * in the file entitled Licensing-Information. * * Contributors: *   MDS - initial API and implementation *   IJI * */package org.modeldriven.fuml.test.load.profile;import org.modeldriven.fuml.repository.ext.Stereotype;import fuml.syntax.classification.Property;/** *  * This stereotype allows a value constraint to be specified for a class * attribute. *  */public class ValueConstraint extends Stereotype{	/**	 * Specifies the lower bounds for numeric values (the value must be greater	 * than or equal to this value). Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	public static final String MIN_INCLUSIVE = "minInclusive";	public static final String BASE__PROPERTY = "base_Property";	/**	 * Specifies the upper bounds for numeric values (the value must be less	 * than or equal to this value). Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	public static final String MAX_INCLUSIVE = "maxInclusive";	/**	 * Specifies the minimum number of characters or list items allowed. Must be	 * equal to or greater than zero. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	public static final String MIN_LENGTH = "minLength";	/**	 * Specifies the maximum number of characters or list items allowed. Must be	 * equal to or greater than zero. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	public static final String MAX_LENGTH = "maxLength";	/**	 * Specifies the exact number of digits allowed. Must be greater than zero.	 * The total number of digits for the Property value must be below or equal	 * to the specified total. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	public static final String TOTAL_DIGITS = "totalDigits";	/**	 * Specifies the maximum number of decimal places allowed. Must be equal to	 * or greater than zero. Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	public static final String FRACTION_DIGITS = "fractionDigits";	/**	 * The Property value must match the specified regular expression. The	 * regular expression follows the Java regular expression conventions.	 * Defines the exact sequence of characters that are acceptable	 */	public static final String PATTERN = "pattern";	/**	 * Specifies the lower bounds for numeric values (the value must be greater	 * than this value). Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	public static final String MIN_EXCLUSIVE = "minExclusive";	/**	 * Specifies the upper bounds for numeric values (the value must be less	 * than this value). Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	public static final String MAX_EXCLUSIVE = "maxExclusive";	/**	 * Specifies the lower bounds for numeric values (the value must be greater	 * than or equal to this value). Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	private String minInclusive;	private Property base_Property;	/**	 * Specifies the upper bounds for numeric values (the value must be less	 * than or equal to this value). Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	private String maxInclusive;	/**	 * Specifies the minimum number of characters or list items allowed. Must be	 * equal to or greater than zero. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	private String minLength;	/**	 * Specifies the maximum number of characters or list items allowed. Must be	 * equal to or greater than zero. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	private String maxLength;	/**	 * Specifies the exact number of digits allowed. Must be greater than zero.	 * The total number of digits for the Property value must be below or equal	 * to the specified total. Note: the data type is currently string to	 * support bioinformatics and other scientific models, as no long or real	 * primitive type exists in the current UML version and restrictions in	 * these models often involves very, very large integral or real numbers.	 */	private String totalDigits;	/**	 * Specifies the maximum number of decimal places allowed. Must be equal to	 * or greater than zero. Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	private String fractionDigits;	/**	 * The Property value must match the specified regular expression. The	 * regular expression follows the Java regular expression conventions.	 * Defines the exact sequence of characters that are acceptable	 */	private String pattern;	/**	 * Specifies the lower bounds for numeric values (the value must be greater	 * than this value). Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	private String minExclusive;	/**	 * Specifies the upper bounds for numeric values (the value must be less	 * than this value). Note: the data type is currently string to support	 * bioinformatics and other scientific models, as no long or real primitive	 * type exists in the current UML version and restrictions in these models	 * often involves very, very large integral or real numbers.	 */	private String maxExclusive;	public String getMinInclusive() {		return this.minInclusive;	}	public void setMinInclusive(String value) {		this.minInclusive = value;	}	public Property getBase_Property() {		return this.base_Property;	}	public void setBase_Property(Property value) {		this.base_Property = value;	}	public String getMaxInclusive() {		return this.maxInclusive;	}	public void setMaxInclusive(String value) {		this.maxInclusive = value;	}	public String getMinLength() {		return this.minLength;	}	public void setMinLength(String value) {		this.minLength = value;	}	public String getMaxLength() {		return this.maxLength;	}	public void setMaxLength(String value) {		this.maxLength = value;	}	public String getTotalDigits() {		return this.totalDigits;	}	public void setTotalDigits(String value) {		this.totalDigits = value;	}	public String getFractionDigits() {		return this.fractionDigits;	}	public void setFractionDigits(String value) {		this.fractionDigits = value;	}	public String getPattern() {		return this.pattern;	}	public void setPattern(String value) {		this.pattern = value;	}	public String getMinExclusive() {		return this.minExclusive;	}	public void setMinExclusive(String value) {		this.minExclusive = value;	}	public String getMaxExclusive() {		return this.maxExclusive;	}	public void setMaxExclusive(String value) {		this.maxExclusive = value;	}}